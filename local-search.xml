<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>UOS挂载裸存储</title>
    <link href="/2024/01/15/UOS%E6%8C%82%E8%BD%BD%E8%A3%B8%E5%AD%98%E5%82%A8/"/>
    <url>/2024/01/15/UOS%E6%8C%82%E8%BD%BD%E8%A3%B8%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="UOS挂载裸存储设备"><a href="#UOS挂载裸存储设备" class="headerlink" title="UOS挂载裸存储设备"></a>UOS挂载裸存储设备</h1><span id="more"></span><p><strong>一、</strong><em><strong>*检查系统是否已经启用了raw模块*</strong></em></p><p>lsmod |grep raw</p><p>如果系统没有启用raw模块!</p><p><strong>二、</strong><em><strong>*设置系统自动启用raw*</strong></em></p><p>root@node1:~# lsmod |grep raw </p><p>root@node1:~# cat &#x2F;etc&#x2F;mod #查看添加内容</p><p>modprobe.d&#x2F;   modules     modules-load.d&#x2F; </p><p>root@uos-PC:~&#x2F;Desktop# cat &#x2F;etc&#x2F;modules</p><p># &#x2F;etc&#x2F;modules: kernel modules to load at boot time.</p><p>#</p><p># This file contains the names of kernel modules that should be loaded</p><p># at boot time, one per line. Lines beginning with “#” are ignored.</p><p>raw</p><p>三、 <em><strong>*reboot重启系统, 再次检查是是否已经启用raw模块*</strong></em></p><p>root@uos-PC:~&#x2F;Desktop# lsmod|grep raw</p><p>raw           12498  0</p><p><strong>四、</strong><em><strong>*创建卷组*</strong></em></p><p>1．查看磁盘情况，创建分区</p><p>root@node1:~# fdisk -l</p><p>root@node1:~# fdisk &#x2F;dev&#x2F;sdb #执行顺序是 n、p、回车、回车、p、w</p><p>Welcome to fdisk (util-linux 2.33.1).</p><p>Changes will remain in memory only, until you decide to write them.</p><p>Be careful before using the write command.</p><p>Command (m for help): n</p><p>Partition type</p><p>  p  primary (0 primary, 0 extended, 4 free)</p><p>  e  extended (container for logical partitions)</p><p>Select (default p): p</p><p>Partition number (1-4, default 1): </p><p>First sector (2048-20971519, default 2048): </p><p>Last sector, +&#x2F;-sectors or +&#x2F;-size{K,M,G,T,P} (2048-20971519, default 20971519): </p><p>Created a new partition 1 of type ‘Linux’ and of size 10 GiB.</p><p>Command (m for help): p</p><p>Disk &#x2F;dev&#x2F;sdb: 10 GiB, 10737418240 bytes, 20971520 sectors</p><p>Disk model: VMware Virtual S</p><p>Units: sectors of 1 * 512 &#x3D; 512 bytes</p><p>Sector size (logical&#x2F;physical): 512 bytes &#x2F; 512 bytes</p><p>I&#x2F;O size (minimum&#x2F;optimal): 512 bytes &#x2F; 512 bytes</p><p>Disklabel type: dos</p><p>Disk identifier: 0x76d104b4</p><p>Device   Boot Start    End  Sectors Size Id Type</p><p>&#x2F;dev&#x2F;sdb1     2048 20971519 20969472  10G 83 Linux</p><p>Command (m for help): w</p><p>The partition table has been altered.</p><p>Calling ioctl() to re-read partition table.</p><p>Syncing disks.</p><p>2．创建PV卷</p><p>  root@node1:~# pvcreate &#x2F;dev&#x2F;sdb1 </p><p> Physical volume “&#x2F;dev&#x2F;sdb1” successfully created.</p><p>3．创建VG卷</p><p>root@node1:~# vgcreate vgraw &#x2F;dev&#x2F;sdb1 </p><p> Volume group “vgraw” successfully created</p><p>4．创建LV卷</p><p>（1）查看VG卷大小root@node1:~# vgdisplay</p><p>（2）创建LV卷</p><p>root@node1:~# lvcreate -L 9.99G -n lvraw vgraw </p><p> Rounding up size to full physical extent 9.99 GiB</p><p> Logical volume “lvraw” created.</p><p>（3）root@node1:~# lvdisplay #查看lv空间大小</p><p><strong>五、</strong><em><strong>*将原设备映射到新建逻辑卷（分区）*</strong></em></p><p>root@node1:~# raw &#x2F;dev&#x2F;raw&#x2F;raw1  &#x2F;dev&#x2F;vgraw&#x2F;lvraw</p><p>&#x2F;dev&#x2F;raw&#x2F;raw1:  bound to major 253, minor 0</p><p><strong>六、</strong><em><strong>*检查是否映射成功*</strong></em></p><p>root@node1:~# raw -qa</p><p>&#x2F;dev&#x2F;raw&#x2F;raw1:  bound to major 253, minor 0</p><p><strong>七、</strong><em><strong>*加入开机自启*</strong></em></p><p>1．编辑文件</p><p>root@node1:~# vim &#x2F;etc&#x2F;rc.local </p><p>#第一句：#！&#x2F;bin&#x2F;sh -e</p><p>#中间执行语句</p><p>#最后结尾： exit 0  例如：</p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgwps1.jpg" alt="img"> </p><p>2．给权限</p><p>root@node1:~# chmod +X &#x2F;etc&#x2F;rc.local </p><p>3．创建软连接</p><p>root@uos-PC:~&#x2F;Desktop# ln -s &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;rc.local.service &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;</p><p><strong>八、</strong><em><strong>*重启电脑查看raw下是否挂载磁盘*</strong></em></p><p>root@node1:~# raw -qa</p><p>&#x2F;dev&#x2F;raw&#x2F;raw1:  bound to major 253, minor 0</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>UOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>裸存储</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>达梦数据库DSC集群安装</title>
    <link href="/2024/01/15/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93DSC%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/"/>
    <url>/2024/01/15/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93DSC%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="达梦数据库（DSC集群）"><a href="#达梦数据库（DSC集群）" class="headerlink" title="达梦数据库（DSC集群）"></a>达梦数据库（DSC集群）</h1><span id="more"></span><h2 id="1-DSC集群简述"><a href="#1-DSC集群简述" class="headerlink" title="1. DSC集群简述"></a>1. DSC集群简述</h2><p>DMDSC 集群是一个多实例、单数据库的系统。多个数据库实例可以同时访问、修改同 一个数据库的数据。用户可以登录集群中的任意一个数据库实例，获得完整的数据库服务。 数据文件、控制文件在集群系统中只有一份，不论有几个节点，这些节点都平等地使用这些 文件，这些文件保存在共享存储上。每个节点有自己独立的联机日志和归档日志，其中联机 日志保存在共享存储上，归档日志可以保存在本地存储上也可以保存在共享存储上。</p><p>DMDSC 集群得以实现的重要基础就是共享存储。DM 支持的共享存储有两种:裸设备和 DMASM。这两种存储的区别在于后者在前者的基础上，部署并使用了 DMASM 文件系统。为 了方便对裸设备上的磁盘或文件进行管理，推荐使用DMASM文件系统管理裸设备。</p><p>DMDSC 集群主要由数据库和数据库实例、共享存储、本地存储、通信网络、以及集群 控制软件 DMCSS 组成。下面以部署了 DMASM 的 DMDSC 集群为例，展示 DMDSC 集群系统结构</p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20230305092424097.png" alt="image-20230305092424097" style="zoom:50%;" /><h2 id="2-DMCSS介绍"><a href="#2-DMCSS介绍" class="headerlink" title="2. DMCSS介绍"></a>2. DMCSS介绍</h2><p>DMCSS(Dameng Cluster Synchronization Services)达梦集群同步服务， 使用 DMASM 集群或 DMDSC 集群都必须要配置 DMCSS 服务。在 DMASM 集群或 DMDSC 集群 中，每个节点都需要配置一个 DMCSS 服务。这些 DMCSS 服务自身也构成一个集群，DMCSS 集群中负责监控、管理整个 DMASM 集群和 DMDSC 集群的节点称为控制节点(control node)，其他 DMCSS 节点称为普通节点(normal node)。DMCSS 普通节点不参与 DMASM 集群和 DMDSC 集群管理，当 DMCSS 控制节点故障时，会从活动的普通节点中重新选取一个 DMCSS 控制节点。</p><h2 id="3-DMASM-介绍"><a href="#3-DMASM-介绍" class="headerlink" title="3. DMASM 介绍"></a>3. DMASM 介绍</h2><p>DMASM(DM Auto Storage Manager)DM 自动存储管理器，是一个专用的分布式 文件系统，使用 DMASM 自动存储管理方案，可以帮助用户更加便捷地管理 DMDSC 集群的数 据库文件。DMASM 的主要部件包括:提供存储服务的裸设备、dmasmsvr 服务器、dmasmapi 接口、初始化工具 dmasmcmd 和管理工具 dmasmtool 等。</p><p>DMDSC 集群可以直接使用裸设备作为共享存储，存放数据库文件。但是，由于裸设备 存在的一些功能限制，造成 DMDSC 集群在使用、维护上并不是那么灵活、方便。为了克服裸设备的这些使用限制，DM 专门设计了一个分布式文件系统 DMASM，来管理 裸设备的磁盘和文件。DMASM 提供了基本的数据文件访问接口，可以有效降低 DMDSC 共享 存储的维护难度。</p><h2 id="4-DMDSC集群搭建"><a href="#4-DMDSC集群搭建" class="headerlink" title="4. DMDSC集群搭建"></a>4. DMDSC集群搭建</h2><h3 id="4-1-环境准备"><a href="#4-1-环境准备" class="headerlink" title="4.1 环境准备"></a>4.1 环境准备</h3><p>硬件：两台机器配置相同，2G内存，100G本地磁盘，2块网卡，另有一块100G共享磁盘。</p><p>操作系统：Debian 11（本次演示使用Debian系统，主流操作系统均兼容，信创专用操作系统除外）</p><p>DM工具位于: <code>  /opt/dmdbms/bin/</code></p><p>配置文件位于： <code>/opt/dmdbms/config</code></p><p>两台机器安装达梦数据库单机版，安装过程参考 <code>浪潮Gs Cloud安装部署步骤 &gt; 4.2.2 命令行安装  </code> 。无需初始化数据库实例</p><p>两台机器关闭防火墙和selinux。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl --now disable firewalld.ervice<br>getenforce<br>setenforce 0 #临时关闭selinux   <br>vi /etc/selinux/config  #永久关闭selinux   <br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入文件后修改 SELINUX = disabled</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">保存退出文件</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启生效</span><br></code></pre></td></tr></table></figure><blockquote><p>注： 生产环境不建议关闭防火墙，需要根据搭建时使用的端口调整防火墙策略。</p></blockquote><h3 id="4-2-搭建两节点DSC集群"><a href="#4-2-搭建两节点DSC集群" class="headerlink" title="4.2 搭建两节点DSC集群"></a>4.2 搭建两节点DSC集群</h3><h4 id="4-2-1-磁盘分区"><a href="#4-2-1-磁盘分区" class="headerlink" title="4.2.1 磁盘分区"></a>4.2.1 磁盘分区</h4><p>在DSC1机器上进行磁盘分区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@DMDSC1:~# lsblk <br>NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT<br>sda      8:0    0  100G  0 disk <br>└─sda1   8:1    0  100G  0 part /<br>sdb      8:16   0  100G  0 disk  # 新添加的共享磁盘<br>sr0     11:0    1 1024M  0 rom  <br></code></pre></td></tr></table></figure><p>开始分区：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">fdisk /dev/sdb<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">n → p → 1 → “回车” →+5G            # dcr<br>n → p → 2 → “回车” → +5G           # vote<br>n → p → 3 → “回车” → +30G          # log0<br>n → p → 4 → “回车” → 回车          # data0<br>w     #保存<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20230305102901135.png" alt="image-20230305102901135"></p><p>另外一台机器<code>lsblk</code>查看硬盘分区，如没有看到分区则<code>reboot</code>重启机器</p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20230305102927313.png" alt="image-20230305102926793"></p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20230305110432584.png"></p><h4 id="4-2-2-绑定裸设备（DSC1、DSC2两节点都需要进行如下操作）"><a href="#4-2-2-绑定裸设备（DSC1、DSC2两节点都需要进行如下操作）" class="headerlink" title="4.2.2 绑定裸设备（DSC1、DSC2两节点都需要进行如下操作）:"></a>4.2.2 绑定裸设备（DSC1、DSC2两节点都需要进行如下操作）:</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/udev/rules.d/80-raw.rules<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加以下内容</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">由于有些机器重启后硬盘标识会变，所以推荐使用硬盘的UUID挂载</span><br><br>ACTION==&quot;add&quot;,KERNEL==&quot;sdb1&quot;,RUN+=&quot;/bin/raw /dev/raw/raw1 %N&quot;<br>ACTION==&quot;add&quot;,KERNEL==&quot;sdb2&quot;,RUN+=&quot;/bin/raw /dev/raw/raw2 %N&quot;<br>ACTION==&quot;add&quot;,KERNEL==&quot;sdb3&quot;,RUN+=&quot;/bin/raw /dev/raw/raw3 %N&quot;<br>ACTION==&quot;add&quot;,KERNEL==&quot;sdb4&quot;,RUN+=&quot;/bin/raw /dev/raw/raw4 %N&quot;<br>KERNEL==&quot;raw[1-4]&quot;, OWNER=&quot;dmdba&quot;, GROUP=&quot;dinstall&quot;, MODE=&quot;660&quot;<br><br></code></pre></td></tr></table></figure><p>使裸设备生效（各系统绑定裸设备的命令不同，需要根据实际环境操作）：</p><p>Centos和Redhat系统：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">start_udev<br></code></pre></td></tr></table></figure><p>Debian和Ubuntu系统：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">partprobe /dev/sdb<br>udevadm control --reload-rules<br>udevadm trigger --type=devices --action=change<br>systemctl restart systemd-udev-trigger.service<br><br>编辑/etc/rc.local文件，开机自动执行绑定裸设备操作<br>/usr/sbin/raw /dev/raw/raw1 /dev/sdb1<br>/usr/sbin/raw /dev/raw/raw2 /dev/sdb2<br>/usr/sbin/raw /dev/raw/raw3 /dev/sdb3<br>/usr/sbin/raw /dev/raw/raw4 /dev/sdb4<br></code></pre></td></tr></table></figure><p>如果没有 <code>partprobe</code> 命令，使用以下命令安装  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">Debian安装partprobe命令<br>apt-get -y install parted <br><br>CentOS安装partprobe命令<br>yum -y install parted<br></code></pre></td></tr></table></figure><p>查看：<code>ll /dev/raw/</code></p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20230306154024755.png" alt="image-20230306154024755"></p><h4 id="4-2-3-创建-dmdcr-cfg-ini-配置文件，DSC1、DSC2两节点都要-配置文件都位于-opt-dmdbms-config"><a href="#4-2-3-创建-dmdcr-cfg-ini-配置文件，DSC1、DSC2两节点都要-配置文件都位于-opt-dmdbms-config" class="headerlink" title="4.2.3 创建 dmdcr_cfg.ini 配置文件，DSC1、DSC2两节点都要(配置文件都位于/opt/dmdbms/config)"></a>4.2.3 创建 <code>dmdcr_cfg.ini</code> 配置文件，DSC1、DSC2两节点都要(配置文件都位于<code>/opt/dmdbms/config</code>)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">su dmdba<br>mkdir /opt/dmdbms/config<br>vi /opt/dmdbms/config/dmdcr_cfg.ini<br></code></pre></td></tr></table></figure><p><code>dmdcr_cfg.ini</code>是格式化<code>DCR</code>和<code>Voting Disk</code>的配置文件。配置信息包括三类: 集群环境全局信息、集群组信息、以及组内节点信息。</p><p>具体配置如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs shell">DCR_N_GRP = 3 #集群环境包括多少个 group，取值范围 1~16<br>DCR_VTD_PATH = /dev/raw/raw2 #Voting Disk 路径<br>DCR_OGUID = 63635 #消息标识，dmcssm 登录 dmcss 消息校验用<br>[GRP]<br>DCR_GRP_TYPE = CSS #组类型<br>DCR_GRP_NAME = GRP_CSS #组名<br>DCR_GRP_N_EP = 2 #组内节点个数 N<br>DCR_GRP_DSKCHK_CNT = 60 #磁盘心跳机制，容错时间，单位秒，缺省 60S，取值范围 5~600<br>[GRP_CSS]<br>DCR_EP_NAME = CSS0<br>DCR_EP_HOST = 192.168.1.35 #节点IP(CSS/ASM 有效)对DB来说，是绑定 VIP 的网卡对应的物理 IP 地址 心跳IP<br>DCR_EP_PORT = 9341<br>[GRP_CSS]<br>DCR_EP_NAME = CSS1<br>DCR_EP_HOST = 192.168.1.36<br>DCR_EP_PORT = 9343<br>[GRP]<br>DCR_GRP_TYPE = ASM<br>DCR_GRP_NAME = GRP_ASM<br>DCR_GRP_N_EP = 2<br>DCR_GRP_DSKCHK_CNT = 60<br>[GRP_ASM]<br>DCR_EP_NAME = ASM0 #ASM 的节点名必须和dmasvrmal.ini里的 MAL_INST_NAME 一致<br>DCR_EP_SHM_KEY = 93360<br>DCR_EP_SHM_SIZE = 10<br>DCR_EP_HOST = 192.168.1.35<br>DCR_EP_PORT = 9349<br>DCR_EP_ASM_LOAD_PATH = /dev/raw<br>[GRP_ASM]<br>DCR_EP_NAME = ASM1<br>DCR_EP_SHM_KEY = 93361<br>DCR_EP_SHM_SIZE = 10<br>DCR_EP_HOST = 192.168.1.36<br>DCR_EP_PORT = 9351<br>DCR_EP_ASM_LOAD_PATH = /dev/raw<br>[GRP]<br>DCR_GRP_TYPE = DB<br>DCR_GRP_NAME = GRP_DSC<br>DCR_GRP_N_EP = 2<br>DCR_GRP_DSKCHK_CNT = 60<br>[GRP_DSC]<br>DCR_EP_NAME = DSC0<br>DCR_EP_SEQNO = 0<br>DCR_EP_PORT = 5236<br>DCR_CHECK_PORT = 9741<br>[GRP_DSC]<br>DCR_EP_NAME = DSC1<br>DCR_EP_SEQNO = 1<br>DCR_EP_PORT = 5236<br>DCR_CHECK_PORT = 9742<br><br></code></pre></td></tr></table></figure><h4 id="4-2-4-创建ASM磁盘（其中一台执行）"><a href="#4-2-4-创建ASM磁盘（其中一台执行）" class="headerlink" title="4.2.4 创建ASM磁盘（其中一台执行）"></a>4.2.4 创建ASM磁盘（其中一台执行）</h4><p>到达梦数据库的<code>bin</code>目录下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">./dmasmcmd<br>create dcrdisk &#x27;/dev/raw/raw1&#x27; &#x27;dcr&#x27;<br>create votedisk &#x27;/dev/raw/raw2&#x27; &#x27;vote&#x27;<br>create asmdisk &#x27;/dev/raw/raw3&#x27; &#x27;LOG&#x27;<br>create asmdisk &#x27;/dev/raw/raw4&#x27; &#x27;DATA&#x27;<br>init dcrdisk &#x27;/dev/raw/raw1&#x27; from &#x27;/opt/dmdbms/config/dmdcr_cfg.ini&#x27; identified by &#x27;123456&#x27;<br>init votedisk &#x27;/dev/raw/raw2&#x27; from &#x27;/opt/dmdbms/config/dmdcr_cfg.ini&#x27;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20230306160513842.png" alt="image-20230306160513842"></p><h4 id="4-2-5-配置ASM的MAL文件-DSC1、DSC2都要配置"><a href="#4-2-5-配置ASM的MAL文件-DSC1、DSC2都要配置" class="headerlink" title="4.2.5 配置ASM的MAL文件(DSC1、DSC2都要配置)"></a>4.2.5 配置ASM的MAL文件(DSC1、DSC2都要配置)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /opt/dmdbms/config/dmasvrmal.ini<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[MAL_INST1]<br>  MAL_INST_NAME        = ASM0<br>  MAL_HOST             = 192.168.1.35<br>  MAL_PORT             = 7236<br>[MAL_INST2]<br>  MAL_INST_NAME        = ASM1<br>  MAL_HOST             = 192.168.1.36<br>  MAL_PORT             = 7237<br></code></pre></td></tr></table></figure><h4 id="4-2-6-配置dmdcr-ini文件（DSC1、DSC2都要）"><a href="#4-2-6-配置dmdcr-ini文件（DSC1、DSC2都要）" class="headerlink" title="4.2.6 配置dmdcr.ini文件（DSC1、DSC2都要）"></a>4.2.6 配置dmdcr.ini文件（DSC1、DSC2都要）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /opt/dmdbms/config/dmdcr.ini<br></code></pre></td></tr></table></figure><p>DSC1:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">DMDCR_PATH     = /dev/raw/raw1<br>DMDCR_MAL_PATH = /opt/dmdbms/config/dmasvrmal.ini<br>DMDCR_SEQNO   = 0 #记录当前节点序号<br>DMDCR_ASM_RESTART_INTERVAL = 0 #DMCSS 认定 DMASM 节点故障重启的时间间隔<br>DMDCR_ASM_STARTUP_CMD = /opt/dmdbms/bin/dmasmsvr  dcr_ini=/opt/dmdbms/config/dmdcr.ini<br><br>DMDCR_DB_RESTART_INTERVAL = 0 #DMCSS 认定 DMDSC 节点故障重启的时间间隔<br>DMDCR_DB_STARTUP_CMD = /opt/dmdbms/bin/dmserver  path=/opt/dmdbms/config/dsc0_config/dm.ini dcr_ini=/opt/dmdbms/config/dmdcr.ini<br></code></pre></td></tr></table></figure><p>DSC2:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">DMDCR_PATH     = /dev/raw/raw1 <br>DMDCR_MAL_PATH = /opt/dmdbms/config/dmasvrmal.ini<br>DMDCR_SEQNO   = 1 #记录当前节点序号<br>DMDCR_ASM_RESTART_INTERVAL = 0 #DMCSS 认定 DMASM 节点故障重启的时间间隔<br>DMDCR_ASM_STARTUP_CMD = /opt/dmdbms/bin/dmasmsvr  dcr_ini=/opt/dmdbms/config/dmdcr.ini<br><br>DMDCR_DB_RESTART_INTERVAL = 0 #DMCSS 认定 DMDSC 节点故障重启的时间间隔<br>DMDCR_DB_STARTUP_CMD = /opt/dmdbms/bin/dmserver  path=/opt/dmdbms/config/dsc1_config/dm.ini dcr_ini=/opt/dmdbms/config/dmdcr.ini<br></code></pre></td></tr></table></figure><h4 id="4-2-7-启动DMCSS（两台都启动，先启动的为控制节点）"><a href="#4-2-7-启动DMCSS（两台都启动，先启动的为控制节点）" class="headerlink" title="4.2.7 启动DMCSS（两台都启动，先启动的为控制节点）"></a>4.2.7 启动DMCSS（两台都启动，先启动的为控制节点）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /opt/dmdbms/bin<br>./dmcss dcr_ini=/opt/dmdbms/config/dmdcr.ini<br></code></pre></td></tr></table></figure><p>DSC1：</p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20230306163208784.png" alt="image-20230306163208784"></p><p>DSC2：</p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20230306163224477.png" alt="image-20230306163224477"></p><h4 id="4-2-8-启动ASM服务，新开窗口执行-（两台都要启动）"><a href="#4-2-8-启动ASM服务，新开窗口执行-（两台都要启动）" class="headerlink" title="4.2.8 启动ASM服务，新开窗口执行,（两台都要启动）"></a>4.2.8 启动ASM服务，新开窗口执行,（两台都要启动）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /opt/dmdbms/bin<br>./dmasmsvr DCR_INI=/opt/dmdbms/config/dmdcr.ini<br></code></pre></td></tr></table></figure><p>DSC1:</p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20230324090231575.png" alt="image-20230324090231575"></p><p>DSC2:</p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20230324090255802.png" alt="image-20230324090255802"></p><h4 id="4-2-9-使用-dmasmtool-工具创建-DMASM-磁盘组（DSC1创建）"><a href="#4-2-9-使用-dmasmtool-工具创建-DMASM-磁盘组（DSC1创建）" class="headerlink" title="4.2.9 使用 dmasmtool 工具创建 DMASM 磁盘组（DSC1创建）"></a>4.2.9 使用 dmasmtool 工具创建 DMASM 磁盘组（DSC1创建）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">./dmasmtool dcr_ini=/opt/dmdbms/config/dmdcr.ini<br>create diskgroup &#x27;DMLOG&#x27; asmdisk &#x27;/dev/raw/raw3&#x27;<br>create diskgroup &#x27;DMDATA&#x27; asmdisk &#x27;/dev/raw/raw4&#x27;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20230306164507780.png" alt="image-20230306164507780"></p><h4 id="4-2-10-使用-dminit-初始化-DB-实例（主控dsc1）"><a href="#4-2-10-使用-dminit-初始化-DB-实例（主控dsc1）" class="headerlink" title="4.2.10 使用 dminit 初始化 DB 实例（主控dsc1）"></a>4.2.10 使用 dminit 初始化 DB 实例（主控dsc1）</h4><h5 id="4-2-10-1-编辑配置文件"><a href="#4-2-10-1-编辑配置文件" class="headerlink" title="4.2.10.1 编辑配置文件"></a>4.2.10.1 编辑配置文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /opt/dmdbms/config/dminit.ini<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell">db_name = GRP_DSC #初始化数据库名称<br>system_path = +DMDATA/data #初始化数据库存放的路径<br>system        = +DMDATA/data/dsc/system.dbf<br>system_size       = 128<br>roll     = +DMDATA/data/dsc/roll.dbf<br>roll_size     = 128<br>main     = +DMDATA/data/dsc/main.dbf<br>main_size     = 128<br>ctl_path     = +DMDATA/data/dsc/dm.ctl<br>ctl_size     = 8<br>PAGE_SIZE  = 32<br>log_size     = 1024<br>dcr_path     = /dev/raw/raw1<br>dcr_seqno     = 0<br>auto_overwrite   = 1<br>[DSC0] <br>config_path = /opt/dmdbms/config/dsc0_config<br>port_num = 5236<br>mal_host = 192.168.1.35<br>mal_port = 9340<br>log_path = +DMLOG/log/dsc0_log01.log<br>log_path = +DMLOG/log/dsc0_log02.log<br>[DSC1] <br>config_path = /opt/dmdbms/config/dsc1_config<br>port_num = 5236<br>mal_host = 192.168.1.36<br>mal_port = 9341<br>log_path = +DMLOG/log/dsc1_log01.log<br>log_path = +DMLOG/log/dsc1_log02.log<br></code></pre></td></tr></table></figure><h5 id="4-2-10-2-dminit-工具初始化数据库"><a href="#4-2-10-2-dminit-工具初始化数据库" class="headerlink" title="4.2.10.2 dminit 工具初始化数据库"></a>4.2.10.2 dminit 工具初始化数据库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./dminit control=/opt/dmdbms/config/dminit.ini<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20230326152554504.png" alt="image-20230326152554504"></p><h5 id="4-2-10-3-初始化完成后会在-init-控制文件配置的目录下生成-2-个实例的配置文件-dsc1和dsc2"><a href="#4-2-10-3-初始化完成后会在-init-控制文件配置的目录下生成-2-个实例的配置文件-dsc1和dsc2" class="headerlink" title="4.2.10.3 初始化完成后会在 init 控制文件配置的目录下生成 2 个实例的配置文件 dsc1和dsc2."></a>4.2.10.3 初始化完成后会在 init 控制文件配置的目录下生成 2 个实例的配置文件 dsc1和dsc2.</h5><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20230306165457118.png" alt="image-20230306165457118"></p><h5 id="4-2-10-4-将-dsc2-目录复制到节点-2-上对应的目录下。"><a href="#4-2-10-4-将-dsc2-目录复制到节点-2-上对应的目录下。" class="headerlink" title="4.2.10.4 将 dsc2 目录复制到节点 2 上对应的目录下。"></a>4.2.10.4 将 dsc2 目录复制到节点 2 上对应的目录下。</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">scp -r /opt/dmdbms/config/dsc1_config dmdba@192.168.1.36:/opt/dmdbms/config<br></code></pre></td></tr></table></figure><h5 id="4-2-10-5-启动dmserver数据库服务（两台都要）"><a href="#4-2-10-5-启动dmserver数据库服务（两台都要）" class="headerlink" title="4.2.10.5 启动dmserver数据库服务（两台都要）"></a>4.2.10.5 启动dmserver数据库服务（两台都要）</h5><p>DSC1:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./dmserver /opt/dmdbms/config/dsc0_config/dm.ini dcr_ini=/opt/dmdbms/config/dmdcr.ini<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20230326152714464.png" alt="image-20230326152714464"></p><p>DSC2:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./dmserver /opt/dmdbms/config/dsc1_config/dm.ini dcr_ini=/opt/dmdbms/config/dmdcr.ini<br></code></pre></td></tr></table></figure><h5 id="4-2-10-6-观察日志，出现SYSTEM-IS-READY-和-EP-REAL-OPEN-表示数据库实例启动成功。"><a href="#4-2-10-6-观察日志，出现SYSTEM-IS-READY-和-EP-REAL-OPEN-表示数据库实例启动成功。" class="headerlink" title="4.2.10.6 观察日志，出现SYSTEM IS READY.和 EP REAL OPEN 表示数据库实例启动成功。"></a>4.2.10.6 观察日志，出现<code>SYSTEM IS READY.</code>和<code> EP REAL OPEN</code> 表示数据库实例启动成功。</h5><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20230326153200899.png" alt="image-20230326153200899"></p><p>DSC1 CSS窗口 show命令查看</p><p>查看<code>sys_status</code> 字段为 <code>OPEN</code> ，<code>vtd_status</code> 字段为 <code>WORKING</code>，<code>active</code> 字段为 <code>TRUE</code> 说明 db 服务正常。至此DSC数据共享集群搭建完成！！！</p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20230326154034073.png" alt="image-20230326154034073"></p><h3 id="4-3-注册服务启动"><a href="#4-3-注册服务启动" class="headerlink" title="4.3 注册服务启动"></a>4.3 注册服务启动</h3><p>由于前台启动比较麻烦，不仅需要通过命令行启动还需要开启多个窗口，因此可将css、asm、db实例注册服务，以服务的方式启动。<br>root开机启动的方式：<br>2 个节点都需要注册，使用 root 用户执行，到数据库安装目录的 script&#x2F;root 目录。</p><p>注册CSS服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">CSS1:<br>./dm_service_installer.sh -t dmcss -dcr_ini /opt/dmdbms/config/dmdcr.ini -p DMCSS1<br><br>CSS2:<br>./dm_service_installer.sh -t dmcss -dcr_ini /opt/dmdbms/config/dmdcr.ini -p DMCSS2<br></code></pre></td></tr></table></figure><p>注册ASM服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">ASM1:<br>./dm_service_installer.sh -t dmasmsvr -dcr_ini /opt/dmdbms/config/dmdcr.ini -y DmCSSServiceDMCSS1 -p DMASM1<br><br>ASM2:<br>./dm_service_installer.sh -t dmasmsvr -dcr_ini /opt/dmdbms/config/dmdcr.ini -y DmCSSServiceDMCSS2 -p DMASM2<br></code></pre></td></tr></table></figure><p>注册DSC服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">DSC1:<br>./dm_service_installer.sh -t dmserver -dm_ini /opt/dmdbms/config/dsc0_config/dm.ini  -dcr_ini /opt/dmdbms/config/dmdcr.ini -y DmASMSvrServiceDMASM1 -p DMSERVER1<br><br>DSC2:<br>./dm_service_installer.sh -t dmserver -dm_ini /opt/dmdbms/config/dsc1_config/dm.ini  -dcr_ini /opt/dmdbms/config/dmdcr.ini -y DmASMSvrServiceDMASM2 -p DMSERVER2<br></code></pre></td></tr></table></figure><p>系统服务清单：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">DSC1:<br>DmCSSServiceDMCSS1.service <br>DmASMSvrServiceDMASM1.service <br>DmServiceDMSERVER1.service <br><br>DSC2:<br>DmCSSServiceDMCSS2.service <br>DmASMSvrServiceDMASM2.service <br>DmServiceDMSERVER2.service <br></code></pre></td></tr></table></figure><h3 id="4-4-设置自动拉起功能"><a href="#4-4-设置自动拉起功能" class="headerlink" title="4.4 设置自动拉起功能"></a>4.4 设置自动拉起功能</h3><p>修改dmdcr.ini的DMDCR_ASM_RESTART_INTERVAL与DMDCR_DB_RESTART_INTERVAL为1。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">DMDCR_ASM_RESTART_INTERVAL = 1  #自动拉起ASM<br>DMDCR_DB_RESTART_INTERVAL = 1   #自动拉起数据库实例<br></code></pre></td></tr></table></figure><h3 id="4-5-配置监视器（其中一台即可）"><a href="#4-5-配置监视器（其中一台即可）" class="headerlink" title="4.5 配置监视器（其中一台即可）"></a>4.5 配置监视器（其中一台即可）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /opt/dmdbms/config/dmcssm.ini<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">CSSM_LOG_PATH          = /opt/dmdbms/log/cssm_log/ #监视器日志文件存放路径<br>CSSM_LOG_FILE_SIZE     = 32 #每个日志文件最大 32M<br>CSSM_LOG_SPACE_LIMIT   = 0 #不限定日志文件总占用空间<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">和 dmdcr_cfg.ini 中的 DCR_OGUID 保持一致</span><br>CSSM_OGUID             = 63635<br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置所有 CSS 的连接信息，和 dmdcr_cfg.ini 中 CSS 配置项的 DCR_EP_HOST 和 DCR_EP_PORT 保持一致</span><br>CSSM_CSS_IP            = 192.168.1.35:9341<br>CSSM_CSS_IP            = 192.168.1.36:9343<br></code></pre></td></tr></table></figure><p>到bin目录下、启动监视器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./dmcssm  /opt/dmdbms/config/dmcssm.ini<br></code></pre></td></tr></table></figure><h4 id="4-5-1-监视器说明："><a href="#4-5-1-监视器说明：" class="headerlink" title="4.5.1 监视器说明："></a>4.5.1 监视器说明：</h4><p>DMDSC 集群的运行情况可以通过 DMCSSM 监视器(Dameng Cluster Synchronization Services Monitor，DMCSSM)进行查看，也可以查询 DMDSC 相 关的动态视图获取更详细的信息。DMCSSM 监视器支持一些控制命令，可以用来启动、关闭 DMDSC 集群，还可以进行手动控制节点故障处理和节点重加入。</p><h4 id="4-5-2-监视器基本命令"><a href="#4-5-2-监视器基本命令" class="headerlink" title="4.5.2 监视器基本命令"></a>4.5.2 监视器基本命令</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>help</td><td>显示帮助信息</td></tr><tr><td>show [group_name]</td><td>显示指定的组信息，如果没有指定group_name，则显示所有组信息</td></tr><tr><td>show config</td><td>显示dmdcr_cfg.ini的配置信息</td></tr><tr><td>show monitor</td><td>显示当前连接到主CSS的所有监视器信息</td></tr><tr><td>set [group_name] auto restart on</td><td>打开指定组的自动拉起功能(只修改 dmcss 内存值)</td></tr><tr><td>set [group_name] auto restart off</td><td>关闭指定组的自动拉起功能(只修改 dmcss 内存值)</td></tr><tr><td>open force [group_name]</td><td>强制open指定的ASM或DB组</td></tr><tr><td>ep startup [group_name]</td><td>启动指定的ASM或DB组</td></tr><tr><td>ep stop [group_name]</td><td>退出指定的ASM或DB组</td></tr><tr><td>ep halt [group_name.ep_name]</td><td>强制退出指定组中的指定节点</td></tr></tbody></table><h3 id="4-6-应用系统连接DSC集群"><a href="#4-6-应用系统连接DSC集群" class="headerlink" title="4.6 应用系统连接DSC集群"></a>4.6 应用系统连接DSC集群</h3><p> 应用系统连接DMDSC集群，一般要求配置连接服务名，以实现故障自动重连。</p><p>可以通过编辑 dm_svc.conf 文件，配置连接服务名。dm_svc.conf 配置文件在 DM 安装时生成，Windows 平台下位于%SystemRoot%\system32 目录，Linux 平台下位于 &#x2F;etc 目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">TIML_ZONE=(480)<br>LANGUAGE=(cn)<br>DMDSC=(192.168.1.35:5236,192.168.1.36:5236)<br>[DMDSC]<br>LOGIN_MODE=(1)<br>SWITCH_TIME=2000<br>SWITCH_INTERVAL=10<br>TIME_ZONE=(480)<br>LANGUAGE=(cn)<br></code></pre></td></tr></table></figure><h3 id="4-7-DMDSC-启动、关闭流程"><a href="#4-7-DMDSC-启动、关闭流程" class="headerlink" title="4.7 DMDSC 启动、关闭流程"></a>4.7 DMDSC 启动、关闭流程</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">启动：<br>启动DMDSC集群之前，必须先启动集群同步服务DMCSS，如果使用了DMASM文件系统，则DMASMSVR 服务也必须先启动。<br><br>关闭：<br>关闭DMDSC集群环境时，应先关闭dmserver，再依次关闭DMASMSVR和DMCSS。<br></code></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>达梦数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>达梦数据库</tag>
      
      <tag>dmdbms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>达梦数据库单机安装</title>
    <link href="/2024/01/15/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8D%95%E6%9C%BA%E5%AE%89%E8%A3%85/"/>
    <url>/2024/01/15/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8D%95%E6%9C%BA%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="达梦数据库（单机部署）"><a href="#达梦数据库（单机部署）" class="headerlink" title="达梦数据库（单机部署）"></a>达梦数据库（单机部署）</h1><span id="more"></span><h3 id="1-Windows系统安装达梦数据库"><a href="#1-Windows系统安装达梦数据库" class="headerlink" title="1 Windows系统安装达梦数据库"></a>1 Windows系统安装达梦数据库</h3><h4 id="1-1-运行安装程序"><a href="#1-1-运行安装程序" class="headerlink" title="1.1 运行安装程序"></a>1.1 运行安装程序</h4><p>将 DM 安装光盘放入光驱中，插入光盘后安装程序自动运行或直接双击 “setup.exe”安装程序后，程序将检测当前计算机系统是否已经安装其他版本 DM。如果存在其他版本 DM，将弹出提示对话框</p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20220720115023790.png" alt="image-20220720115023790"></p><h4 id="1-2-语言与时区选择"><a href="#1-2-语言与时区选择" class="headerlink" title="1.2 语言与时区选择"></a>1.2 语言与时区选择</h4><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20220720115318940.png" alt="image-20220720115318940"></p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20220720115530354.png" alt="image-20220720115530354"></p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20220720115629168.png" alt="image-20220720115629168"></p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20220720115655095.png" alt="image-20220720115655095"></p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20220720115712270.png" alt="image-20220720115712270"></p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20220720115810559.png" alt="image-20220720115810559"></p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20220720115835380.png" alt="image-20220720115835380"></p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20220720115935413.png" alt="image-20220720115935413"></p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20220720120301569.png" alt="image-20220720120301569"></p><h3 id="2-Linux系统安装达梦数据库"><a href="#2-Linux系统安装达梦数据库" class="headerlink" title="2 Linux系统安装达梦数据库"></a>2 Linux系统安装达梦数据库</h3><h4 id="2-1-图形化安装"><a href="#2-1-图形化安装" class="headerlink" title="2.1 图形化安装"></a>2.1 图形化安装</h4><p>用户双击 DMInstall.bin 或执行以下命令将运行 DM 的图形化安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./DMInstall.bin<br></code></pre></td></tr></table></figure><p>安装步骤同 <code>4.1 Windows系统安装达梦数据库</code></p><h4 id="2-2-命令行安装"><a href="#2-2-命令行安装" class="headerlink" title="2.2 命令行安装"></a>2.2 命令行安装</h4><p>在金航网环境中的 Linux操作系统上是没有图形化界面的，为了使 DM 能够在金航网环境中顺利安装，DM 提供了命令行的安装方式。在终端进入到安装程序所在文 件夹，执行以下命令进行命令行安装:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./DMInstall.bin -i<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20220720123809684.png" alt="image-20220720123809684"></p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20220720123841926.png" alt="image-20220720123841926"></p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20220720123908346.png" alt="image-20220720123908346"></p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20220720123924187.png" alt="image-20220720123924187"></p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20220720123958599.png" alt="image-20220720123958599"></p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20220720124051657.png" alt="image-20220720124051657"></p><h4 id="2-3-初始化数据库实例"><a href="#2-3-初始化数据库实例" class="headerlink" title="2.3 初始化数据库实例"></a>2.3 初始化数据库实例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /opt/dmdbms/bin/<br><br>./dminit PATH=/opt/dmdbms/data<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20220720124321619.png" alt="image-20220720124321619"></p><h4 id="2-4-注册达梦数据库为系统服务"><a href="#2-4-注册达梦数据库为系统服务" class="headerlink" title="2.4 注册达梦数据库为系统服务"></a>2.4 注册达梦数据库为系统服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /opt/dmdbms/script/root<br><br>./dm_service_installer.sh -t dmserver -p DMSERVER -dm_ini /opt/dmdbms/data/DAMENG/dm.ini<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20220720124804328.png" alt="image-20220720124804328"></p><h4 id="2-5-新建用户及表空间"><a href="#2-5-新建用户及表空间" class="headerlink" title="2.5 新建用户及表空间"></a>2.5 新建用户及表空间</h4><p>进入  <code>/opt/dmdbms/bin</code> 下 ，使用 <code>disql</code> 工具登陆达梦数据库；</p><ul><li><p>使用 <code>SYSDBA</code> 用户新建表空间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">create tablespace &quot;AVIC&quot; datafile &#x27;/opt/dmdbms/bin/data/DAMENG/AVIC.DBF&#x27; size 256 CACHE = NORMAL;<br></code></pre></td></tr></table></figure></li><li><p>使用 <code>SYSDBA</code> 用户新建 <code>AVIC</code> 用户 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">create user &quot;AVIC&quot; identified by &quot;12345678aA!&quot; <br>default tablespace &quot;AVIC&quot; <br>default index tablespace &quot;AVIC&quot;;<br><br>grant &quot;PUBLIC&quot;,&quot;SOI&quot;,&quot;VTI&quot;,&quot;SYS&quot; to &quot;AVIC&quot;;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>达梦数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>达梦数据库</tag>
      
      <tag>dmdbms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客基本用法</title>
    <link href="/2024/01/12/Hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <url>/2024/01/12/Hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo博客基本用法"><a href="#Hexo博客基本用法" class="headerlink" title="Hexo博客基本用法"></a>Hexo博客基本用法</h1><span id="more"></span><h3 id="1-新建文章"><a href="#1-新建文章" class="headerlink" title="1. 新建文章"></a>1. 新建文章</h3><p>在项目根目录下执行新建命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure><p>可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局</p><h4 id="布局（Layout）"><a href="#布局（Layout）" class="headerlink" title="布局（Layout）"></a>布局（Layout）</h4><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>。在创建这三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p><table><thead><tr><th align="left">布局</th><th align="left">路径</th></tr></thead><tbody><tr><td align="left"><code>post</code></td><td align="left"><code>source/_posts</code></td></tr><tr><td align="left"><code>page</code></td><td align="left"><code>source</code></td></tr><tr><td align="left"><code>draft</code></td><td align="left"><code>source/_drafts</code></td></tr></tbody></table><p><strong>禁用布局</strong>：如果你不希望一篇文章（post&#x2F;page）使用主题处理，请在它的 <code>front-matter</code> 中设置 <code>layout: false</code>。</p><h4 id="文件名称"><a href="#文件名称" class="headerlink" title="文件名称"></a>文件名称</h4><p>Hexo 默认以标题做为文件名称，但您可编辑 <code>new_post_name</code> 参数来改变默认的文件名称，举例来说，设为 <code>:year-:month-:day-:title.md</code> 可让您更方便的通过日期来管理文章。你可以使用以下占位符：</p><table><thead><tr><th align="left">变量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>:title</code></td><td align="left">标题（小写，空格将会被替换为短杠）</td></tr><tr><td align="left"><code>:year</code></td><td align="left">建立的年份，比如， <code>2015</code></td></tr><tr><td align="left"><code>:month</code></td><td align="left">建立的月份（有前导零），比如， <code>04</code></td></tr><tr><td align="left"><code>:i_month</code></td><td align="left">建立的月份（无前导零），比如， <code>4</code></td></tr><tr><td align="left"><code>:day</code></td><td align="left">建立的日期（有前导零），比如， <code>07</code></td></tr><tr><td align="left"><code>:i_day</code></td><td align="left">建立的日期（无前导零），比如， <code>7</code></td></tr></tbody></table><h3 id="2-删除文章"><a href="#2-删除文章" class="headerlink" title="2. 删除文章"></a>2. 删除文章</h3><p>直接删除项目根目录<code>source/</code>文件夹下的文章源文件即可。</p><h3 id="3-部署到GitHub"><a href="#3-部署到GitHub" class="headerlink" title="3. 部署到GitHub"></a>3. 部署到GitHub</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean &amp; hexo g &amp; hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac系统命令行修改dns</title>
    <link href="/2024/01/12/Mac%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BF%AE%E6%94%B9dns/"/>
    <url>/2024/01/12/Mac%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BF%AE%E6%94%B9dns/</url>
    
    <content type="html"><![CDATA[<h1 id="Mac-命令行修改dns"><a href="#Mac-命令行修改dns" class="headerlink" title="Mac 命令行修改dns"></a>Mac 命令行修改dns</h1><span id="more"></span><h3 id="查看本地DNS服务器"><a href="#查看本地DNS服务器" class="headerlink" title="查看本地DNS服务器"></a>查看本地DNS服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">networksetup -getdnsservers Wi-Fi<br></code></pre></td></tr></table></figure><h3 id="配置本地DNS服务器"><a href="#配置本地DNS服务器" class="headerlink" title="配置本地DNS服务器"></a>配置本地DNS服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">networksetup -setdnsservers Wi-Fi 8.8.8.8<br></code></pre></td></tr></table></figure><h3 id="nslookup查看DNS信息"><a href="#nslookup查看DNS信息" class="headerlink" title="nslookup查看DNS信息"></a>nslookup查看DNS信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nslookup baidu.com<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dns</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UOS网卡down</title>
    <link href="/2024/01/12/UOS%E7%BD%91%E5%8D%A1down/"/>
    <url>/2024/01/12/UOS%E7%BD%91%E5%8D%A1down/</url>
    
    <content type="html"><![CDATA[<h3 id="UOS网卡down"><a href="#UOS网卡down" class="headerlink" title="UOS网卡down"></a>UOS网卡down</h3><span id="more"></span><ol><li><p>加载bonding模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">modprobe --first-time bonding<br>modprobe bonding<br></code></pre></td></tr></table></figure></li><li><p>重启网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service network restart<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>UOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>网卡</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UOS系统双网卡做bond</title>
    <link href="/2024/01/12/UOS%E7%B3%BB%E7%BB%9F%E5%8F%8C%E7%BD%91%E5%8D%A1%E5%81%9Abond/"/>
    <url>/2024/01/12/UOS%E7%B3%BB%E7%BB%9F%E5%8F%8C%E7%BD%91%E5%8D%A1%E5%81%9Abond/</url>
    
    <content type="html"><![CDATA[<h2 id="UOS系统双网卡做bond"><a href="#UOS系统双网卡做bond" class="headerlink" title="UOS系统双网卡做bond"></a>UOS系统双网卡做bond</h2><span id="more"></span><ol><li><p>安装bonding工具包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt install ifenslave -y<br></code></pre></td></tr></table></figure></li><li><p>配置开机自启bonding模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;bonding&quot; &gt;&gt; /etc/modules<br></code></pre></td></tr></table></figure></li><li><p>停止Networking和NetworkManager服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl stop networking<br>systemctl stop NetworkManager<br></code></pre></td></tr></table></figure></li><li><p>取消NetworkManager自启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl disable NetworkManager<br></code></pre></td></tr></table></figure></li><li><p>加载bond模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">modprobe bonding<br></code></pre></td></tr></table></figure></li><li><p>检查bond模块是否正常加载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">lsmod | grep bonding<br></code></pre></td></tr></table></figure></li><li><p>修改&#x2F;etc&#x2F;network&#x2F;interfaces</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">auto bond1<br>iface bond1 inet static<br>        address 192.168.203.21<br>        gateway 192.168.203.254<br>        netmask 255.255.255.0<br>        bond-slaves none<br>        bond-mode active-backup<br>        bond-miimon 100<br>        bond-fail_over_mac 1<br>  <br>auto enp125s0f0<br>iface enp125s0f0 inet manual<br>        bond-master bond1<br>        bond-primary enp125s0f0 enp125s0f1<br>  <br>auto enp125s0f1<br>iface enp125s0f1 inet manual<br>        bond-master bond1<br>        bond-primary enp125s0f0 enp125s0f1<br></code></pre></td></tr></table></figure></li><li><p>启动Networking服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start networking<br></code></pre></td></tr></table></figure></li><li><p>刷新网卡信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ip addr flush dev enp125s0f0<br>ip addr flush dev enp125s0f1<br></code></pre></td></tr></table></figure></li><li><p>实验down掉其中一个网卡是否正常</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ifdown enp125s0f0<br>ifdown enp125s0f1<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>UOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>bond</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UOS系统NetworkManager切换Networking</title>
    <link href="/2024/01/12/UOS%E7%B3%BB%E7%BB%9FNetworkManager%E5%88%87%E6%8D%A2Networking/"/>
    <url>/2024/01/12/UOS%E7%B3%BB%E7%BB%9FNetworkManager%E5%88%87%E6%8D%A2Networking/</url>
    
    <content type="html"><![CDATA[<h2 id="UOS系统NetworkManager切换Networking"><a href="#UOS系统NetworkManager切换Networking" class="headerlink" title="UOS系统NetworkManager切换Networking"></a>UOS系统NetworkManager切换Networking</h2><span id="more"></span><ol><li><p>关闭NetworkManager</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo /etc/init.d/network-manager stop<br></code></pre></td></tr></table></figure></li><li><p>取消开机启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl disable NetworkManager<br></code></pre></td></tr></table></figure></li><li><p>启动networking</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/etc/init.d/networking restart<br></code></pre></td></tr></table></figure></li><li><p>修改 &#x2F;etc&#x2F;network&#x2F;interfaces 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">auto lo<br>iface lo inet loopback<br><br>auto enp…(网卡名称)<br>iface enp…(网卡名称) inet static<br>netmask 255.255.255.0<br>gateway 192.168.203.254<br>address 192.168.203.21<br></code></pre></td></tr></table></figure></li><li><p>重启网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ip addr flush dev enp125s0f0 &amp;&amp; /etc/init.d/networking restart<br>systemctl status networking<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>UOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Networking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用bak格式数据库存储文件恢复达梦数据库</title>
    <link href="/2024/01/12/%E4%BD%BF%E7%94%A8bak%E6%A0%BC%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%98%E5%82%A8%E6%96%87%E4%BB%B6%E6%81%A2%E5%A4%8D%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2024/01/12/%E4%BD%BF%E7%94%A8bak%E6%A0%BC%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%98%E5%82%A8%E6%96%87%E4%BB%B6%E6%81%A2%E5%A4%8D%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="使用bak格式数据库存储文件恢复达梦数据库"><a href="#使用bak格式数据库存储文件恢复达梦数据库" class="headerlink" title="使用bak格式数据库存储文件恢复达梦数据库"></a>使用bak格式数据库存储文件恢复达梦数据库</h2><span id="more"></span><blockquote><p>注意：被恢复的数据库版本和原数据库版本必须一致</p></blockquote><h3 id="准备-bak备份文件集"><a href="#准备-bak备份文件集" class="headerlink" title="准备.bak备份文件集"></a>准备.bak备份文件集</h3><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20220108225439001.png" alt="image-20220108225439001"></p><h3 id="将-bak备份文件集传输到被恢复数据库服务器上"><a href="#将-bak备份文件集传输到被恢复数据库服务器上" class="headerlink" title="将.bak备份文件集传输到被恢复数据库服务器上"></a>将.bak备份文件集传输到被恢复数据库服务器上</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">scp -r DB_GPR_DSC_* dmdba@192.168.201.253:/home/dmdba/DMBAK<br></code></pre></td></tr></table></figure><h3 id="切换到dmdba用户并停止数据库服务"><a href="#切换到dmdba用户并停止数据库服务" class="headerlink" title="切换到dmdba用户并停止数据库服务"></a>切换到dmdba用户并停止数据库服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">su dmdba <br>cd /home/dmdba/dmdbms/bin<br>./DmServiceDMSERVER stop<br></code></pre></td></tr></table></figure><h3 id="通过dmrman工具对数据库进行恢复"><a href="#通过dmrman工具对数据库进行恢复" class="headerlink" title="通过dmrman工具对数据库进行恢复"></a>通过dmrman工具对数据库进行恢复</h3><p>本次演示全量和增量的情况（一个全量备份文件和两个增量备份文件）。增量需要依赖于全量备份，所以需要先恢复全量备份。</p><h4 id="校验所有的备份集"><a href="#校验所有的备份集" class="headerlink" title="校验所有的备份集"></a>校验所有的备份集</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">CHECK BACKUPSET &#x27;/home/dmdba/DMBAK/DB_GRP_DSC_FULL_2022_01_03_00_00_27&#x27;<br>CHECK BACKUPSET &#x27;/home/dmdba/DMBAK/DB_GRP_DSC_INCREMENT_2022_01_04_00_00_27&#x27;<br>CHECK BACKUPSET &#x27;/home/dmdba/DMBAK/DB_GRP_DSC_INCREMENT_2022_01_05_00_00_27&#x27;<br></code></pre></td></tr></table></figure><h4 id="1-还原全量数据库"><a href="#1-还原全量数据库" class="headerlink" title="1. 还原全量数据库"></a>1. 还原全量数据库</h4><p>本次演示全量备份文件为5GB大小，服务器配置为32核心64GB，还原数据库时间为4分钟左右，具体的还原的时间根据服务器配置不同，时间上也会不同。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">RESTORE DATABASE &#x27;/DMDATA/DAMENG/dm.ini&#x27; FROM BACKUPSET &#x27;/home/dmdba/DMBAK/DB_GRP_DSC_FULL_2022_01_03_00_00_27&#x27;<br></code></pre></td></tr></table></figure><h4 id="2-恢复全量数据库"><a href="#2-恢复全量数据库" class="headerlink" title="2. 恢复全量数据库"></a>2. 恢复全量数据库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">RECOVER DATABASE &#x27;/DMDATA/DAMENG/dm.ini&#x27; FROM BACKUPSET &#x27;/home/dmdba/DMBAK/DB_GRP_DSC_FULL_2022_01_03_00_00_27&#x27;<br></code></pre></td></tr></table></figure><h4 id="3-更新数据库"><a href="#3-更新数据库" class="headerlink" title="3. 更新数据库"></a>3. 更新数据库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">RECOVER DATABASE &#x27;/DMDATA/DAMENG/dm.ini&#x27; UPDATE DB_MAGIC;<br></code></pre></td></tr></table></figure><h4 id="4-还原增量1数据库"><a href="#4-还原增量1数据库" class="headerlink" title="4. 还原增量1数据库"></a>4. 还原增量1数据库</h4><p>本次演示全量备份文件为500MB大小，服务器配置为32核心64GB，还原数据库时间为3分钟左右，具体的还原的时间根据服务器配置不同时间上也会不同。恢复增量时需要按照增量文件产生的时间依次执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">RESTORE DATABASE &#x27;/DMDATA/DAMENG/dm.ini&#x27; FROM BACKUPSET &#x27;/home/dmdba/DMBAK/DB_GRP_DSC_INCREMENT_2022_01_04_00_00_27&#x27;<br></code></pre></td></tr></table></figure><h4 id="5-恢复增量1数据库"><a href="#5-恢复增量1数据库" class="headerlink" title="5. 恢复增量1数据库"></a>5. 恢复增量1数据库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">RECOVER DATABASE &#x27;/DMDATA/DAMENG/dm.ini&#x27; FROM BACKUPSET &#x27;/home/dmdba/DMBAK/DB_GRP_DSC_INCREMENT_2022_01_04_00_00_27&#x27;<br></code></pre></td></tr></table></figure><h4 id="6-更新数据库"><a href="#6-更新数据库" class="headerlink" title="6. 更新数据库"></a>6. 更新数据库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">RECOVER DATABASE &#x27;/DMDATA/DAMENG/dm.ini&#x27; UPDATE DB_MAGIC;<br></code></pre></td></tr></table></figure><h4 id="7-增量2重复4～6步即可。"><a href="#7-增量2重复4～6步即可。" class="headerlink" title="7. 增量2重复4～6步即可。"></a>7. 增量2重复4～6步即可。</h4><h4 id="8-所有备份文件恢复完成之后exit退出dmrman工具，并启动服务"><a href="#8-所有备份文件恢复完成之后exit退出dmrman工具，并启动服务" class="headerlink" title="8. 所有备份文件恢复完成之后exit退出dmrman工具，并启动服务"></a>8. 所有备份文件恢复完成之后exit退出dmrman工具，并启动服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./DmServiceDMSERVER start<br></code></pre></td></tr></table></figure><h4 id="9-使用原数据库的账号密码登录验证即可，如存在密码错误问题很大几率是因为数据库小版本不一样，更换成一样的版本即可。"><a href="#9-使用原数据库的账号密码登录验证即可，如存在密码错误问题很大几率是因为数据库小版本不一样，更换成一样的版本即可。" class="headerlink" title="9. 使用原数据库的账号密码登录验证即可，如存在密码错误问题很大几率是因为数据库小版本不一样，更换成一样的版本即可。"></a>9. 使用原数据库的账号密码登录验证即可，如存在密码错误问题很大几率是因为数据库小版本不一样，更换成一样的版本即可。</h4><h4 id="10-登录验证"><a href="#10-登录验证" class="headerlink" title="10. 登录验证"></a>10. 登录验证</h4>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>达梦数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>达梦数据库</tag>
      
      <tag>dmdbms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux配置Java环境变量</title>
    <link href="/2024/01/12/Linux%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <url>/2024/01/12/Linux%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux配置Java环境变量"><a href="#Linux配置Java环境变量" class="headerlink" title="Linux配置Java环境变量"></a>Linux配置Java环境变量</h1><span id="more"></span><p>复制jdk到&#x2F;usr&#x2F;local&#x2F;下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp -r /opt/dmdbms/jdk /usr/local<br></code></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/profile<br></code></pre></td></tr></table></figure><p>按 <code>i</code> 进入编辑模式，光标移动到文件末尾，添加如下内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">export JAVA_HOME=/usr/local/jdk<br>export CLASSPATH=$:CLASSPATH:$JAVA_HOME/lib/<br>export PATH=$PATH:$JAVA_HOME/bin<br></code></pre></td></tr></table></figure><p>编辑完之后，按 <code>ESC</code>输入<code>:wq</code> 保存并退出，然后输入以下指令，刷新环境配置使其生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/profile<br></code></pre></td></tr></table></figure><p>查看jdk是否安装成功，输入指令java -version即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -version<br></code></pre></td></tr></table></figure><p>出现以下内容代表java安装成功</p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20240112144813387.png" alt="image-20240112144813387"></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux使用crontab定时复制文件</title>
    <link href="/2024/01/12/Linux%E4%BD%BF%E7%94%A8crontab%E5%AE%9A%E6%97%B6%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6/"/>
    <url>/2024/01/12/Linux%E4%BD%BF%E7%94%A8crontab%E5%AE%9A%E6%97%B6%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="Linux使用crontab定时复制文件"><a href="#Linux使用crontab定时复制文件" class="headerlink" title="Linux使用crontab定时复制文件"></a>Linux使用crontab定时复制文件</h2><span id="more"></span><h3 id="crontab-基本语法"><a href="#crontab-基本语法" class="headerlink" title="crontab 基本语法"></a>crontab 基本语法</h3><p>注：每个用户一套单独的crontab，多个用户需要使用每一个用户单独使用crontab配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">crontab -l 查看该用户定时任务<br>crontab -e 修改该用户定时任务<br></code></pre></td></tr></table></figure><h3 id="crontab-定时赋值修改内容"><a href="#crontab-定时赋值修改内容" class="headerlink" title="crontab 定时赋值修改内容"></a>crontab 定时赋值修改内容</h3><p>Cron表达式生成器: <a href="https://www.bejson.com/othertools/cron/">https://www.bejson.com/othertools/cron/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">* * * * * /bin/cp /源文件路径 /目的文件路径<br></code></pre></td></tr></table></figure><h3 id="crontab-执行日志"><a href="#crontab-执行日志" class="headerlink" title="crontab 执行日志"></a>crontab 执行日志</h3><p>每个用户的crontab执行日志都存放在<code>/var/mail</code>下，以用户名命名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/var/mail<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20220228102305384.png" alt="image-20220228102305384"></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>crontab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建iKEv2-strongswan服务</title>
    <link href="/2024/01/12/%E6%90%AD%E5%BB%BAiKEv2-strongswan%E6%9C%8D%E5%8A%A1/"/>
    <url>/2024/01/12/%E6%90%AD%E5%BB%BAiKEv2-strongswan%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建iKEv2-strongswan服务"><a href="#搭建iKEv2-strongswan服务" class="headerlink" title="搭建iKEv2-strongswan服务"></a>搭建iKEv2-strongswan服务</h1><span id="more"></span><ol><li><p>安装strongswan、strongswan-pki包</p></li><li><p>生成私钥及证书</p></li></ol><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">pki <span class="hljs-params">--gen</span> <span class="hljs-params">--type</span> rsa <span class="hljs-params">--size</span> 2048 <span class="hljs-params">--outform</span> pem &gt; ca_key.pem<br><br>pki <span class="hljs-params">--self</span> <span class="hljs-params">--in</span> ca_key.pem <span class="hljs-params">--dn</span> <span class="hljs-string">&quot;C=CN, O=GuoDingDing, CN=GuoDingDing CA&quot;</span> <span class="hljs-params">--ca</span> <span class="hljs-params">--type</span> rsa <span class="hljs-params">--lifetime</span> 3650 <span class="hljs-params">--outform</span> pem &gt; ca.pem<br><br>pki <span class="hljs-params">--gen</span> <span class="hljs-params">--type</span> rsa <span class="hljs-params">--size</span> 2048 <span class="hljs-params">--outform</span> pem &gt; server_key.pem<br><br>pki <span class="hljs-params">--pub</span> <span class="hljs-params">--in</span> server_key.pem <span class="hljs-params">--type</span> rsa | pki <span class="hljs-params">--issue</span> <span class="hljs-params">--cacert</span> ca.pem <span class="hljs-params">--cakey</span> ca_key.pem <span class="hljs-params">--dn</span> <span class="hljs-string">&quot;C=CN, O=GuoDingDing,CN=Server&quot;</span> <span class="hljs-params">--san=</span><span class="hljs-string">&quot;119.8.121.182&quot;</span> <span class="hljs-params">--flag</span> serverAuth <span class="hljs-params">--flag</span> ikeIntermediate <span class="hljs-params">--lifetime</span> 1825 <span class="hljs-params">--outform</span> pem &gt; server.pem<br><br>pki <span class="hljs-params">--gen</span> <span class="hljs-params">--type</span> rsa <span class="hljs-params">--size</span> 2048 <span class="hljs-params">--outform</span> pem &gt; client_key.pem<br><br>pki <span class="hljs-params">--pub</span> <span class="hljs-params">--in</span> client_key.pem <span class="hljs-params">--type</span> rsa | pki <span class="hljs-params">--issue</span> <span class="hljs-params">--cacert</span> ca.pem <span class="hljs-params">--cakey</span> ca_key.pem <span class="hljs-params">--dn</span> <span class="hljs-string">&quot;C=CN, O=GuoDingDing, CN=GuoDingDing Client CA&quot;</span> <span class="hljs-params">--lifetime</span> 1095 <span class="hljs-params">--outform</span> pem &gt; GuoDingDing.pem<br><br>openssl pkcs12 -export -inkey client_key.pem -in GuoDingDing.pem -name <span class="hljs-string">&quot;GuoDingDing&quot;</span> -certfile ca.pem -caname <span class="hljs-string">&quot;GuoDingDing CA&quot;</span> -out GuoDingDing.p12<br></code></pre></td></tr></table></figure><p>分别将ca.pem, server.pem, server_key.pem复制到&#x2F;etc&#x2F;ipsec.d&#x2F;下的cacerts, certs, private目录下。将client.p12部署到客户端。</p><ol start="3"><li>编辑以下配置文件</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># /etc/ipsec.conf:</span><br><span class="hljs-built_in"></span><br><span class="hljs-built_in">config </span>setup<br>uniqueids = <span class="hljs-literal">yes</span><br>conn %default<br><span class="hljs-attribute">auto</span>=add<br><span class="hljs-attribute">rekey</span>=<span class="hljs-literal">no</span><br><span class="hljs-attribute">reauth</span>=<span class="hljs-literal">no</span><br><span class="hljs-attribute">fragmentation</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attribute">keyexchange</span>=ikev2<br><span class="hljs-attribute">forceencaps</span>=<span class="hljs-literal">yes</span><br><br><span class="hljs-attribute">dpdaction</span>=clear<br><span class="hljs-attribute">dpddelay</span>=300s<br><br># common left configuration<br><span class="hljs-attribute">left</span>=%defaultroute<br><span class="hljs-attribute">leftsubnet</span>=0.0.0.0/0<br><span class="hljs-attribute">leftauth</span>=pubkey<br><span class="hljs-attribute">leftsendcert</span>=always<br><span class="hljs-attribute">leftcert</span>=server.pem<br><br># common right configuration<br><span class="hljs-attribute">right</span>=%any<br><span class="hljs-attribute">rightsourceip</span>=xxx.xxx.xxx.0/24<br><span class="hljs-attribute">rightdns</span>=xxx.xxx.xxx.xxx,xxx.xxx.xxx.xxx<br><br>conn ikev2-certificate-windows-linux<br><span class="hljs-attribute">rightauth</span>=pubkey<br><br>conn ikev2-macos-ios<br><span class="hljs-attribute">leftid</span>=xxx.xxx.xxx<br><span class="hljs-attribute">rightauth</span>=eap-mschapv2<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ada"># /etc/ipsec.secrets:<br><br># using <span class="hljs-keyword">private</span> key located <span class="hljs-keyword">at</span> /etc/ipsec.d/<span class="hljs-keyword">private</span>/<br> : <span class="hljs-type">RSA</span> server_key.pem<br><br># using username/password<br># USERNAME : <span class="hljs-type">EAP</span> <span class="hljs-string">&quot;USER PASSWORD&quot;</span><br>obama : <span class="hljs-type">EAP</span> <span class="hljs-string">&quot;SuperPassword123&quot;</span><br>putin : <span class="hljs-type">EAP</span> <span class="hljs-string">&quot;KremlinSecure666&quot;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>设置IP转发</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># /etc/sysctl.conf:</span><br><span class="hljs-attr">net.ipv4.ip_forward</span> = <span class="hljs-number">1</span><br><span class="hljs-attr">net.ipv4.conf.all.accept_redirects</span> = <span class="hljs-number">0</span><br><span class="hljs-attr">net.ipv4.conf.all.send_redirects</span> = <span class="hljs-number">0</span><br><span class="hljs-attr">net.ipv4.ip_no_pmtu_disc</span> = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>然后执行：<code>sudo sysctl -p</code></p><ol start="5"><li>设置iptables。在&#x2F;etc&#x2F;rc.local中添加：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">iptables -t nat -<span class="hljs-selector-tag">A</span> POSTROUTING -s <span class="hljs-selector-attr">[虚拟网段]</span>/掩码位数 -j MASQUERADE<br>iptables -t mangle -<span class="hljs-selector-tag">A</span> FORWARD <span class="hljs-attr">--match</span> policy <span class="hljs-attr">--pol</span> ipsec <span class="hljs-attr">--dir</span> in -s <span class="hljs-selector-attr">[虚拟网段]</span>/掩码位数 -o <span class="hljs-selector-attr">[出口网络]</span> -<span class="hljs-selector-tag">p</span> tcp -m tcp <span class="hljs-attr">--tcp-flags</span> SYN,RST SYN -m tcpmss <span class="hljs-attr">--mss</span> <span class="hljs-number">1361</span>:<span class="hljs-number">1536</span> -j TCPMSS --set-mss <span class="hljs-number">1360</span><br></code></pre></td></tr></table></figure><ol start="6"><li>重启生效</li></ol>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ikev2</tag>
      
      <tag>strongswan</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7.6修改系统最大打开文件数</title>
    <link href="/2024/01/12/Centos7-6%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E6%9C%80%E5%A4%A7%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E6%95%B0/"/>
    <url>/2024/01/12/Centos7-6%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E6%9C%80%E5%A4%A7%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="Centos7-6修改系统最大打开文件数"><a href="#Centos7-6修改系统最大打开文件数" class="headerlink" title="Centos7.6修改系统最大打开文件数"></a>Centos7.6修改系统最大打开文件数</h2><span id="more"></span><h3 id="临时修改"><a href="#临时修改" class="headerlink" title="临时修改"></a>临时修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ulimit -n 102400<br></code></pre></td></tr></table></figure><h3 id="永久修改"><a href="#永久修改" class="headerlink" title="永久修改"></a>永久修改</h3><h4 id="1-修改-etc-systemd-system-conf-文件"><a href="#1-修改-etc-systemd-system-conf-文件" class="headerlink" title="1. 修改/etc/systemd/system.conf  文件"></a>1. 修改<code>/etc/systemd/system.conf </code> 文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/systemd/system.conf <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">文件最后添加以下内容</span><br>DefaultLimitNOFILE=102400<br>DefaultLimitNPROC=102400<br></code></pre></td></tr></table></figure><h4 id="2-修改-etc-security-limits-conf文件"><a href="#2-修改-etc-security-limits-conf文件" class="headerlink" title="2. 修改/etc/security/limits.conf文件"></a>2. 修改<code>/etc/security/limits.conf</code>文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/security/limits.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">文件最后添加以下内容</span><br>* soft nofile 102400<br>* hard nofile 102400<br>* soft nproc 102400<br>* hard nproc 102400<br></code></pre></td></tr></table></figure><h4 id="3-重启服务器-reboot"><a href="#3-重启服务器-reboot" class="headerlink" title="3. 重启服务器 reboot"></a>3. 重启服务器 <code>reboot</code></h4><h4 id="4-检查系统最大打开文件数ulimit-a是否修改成102400"><a href="#4-检查系统最大打开文件数ulimit-a是否修改成102400" class="headerlink" title="4. 检查系统最大打开文件数ulimit -a是否修改成102400"></a>4. 检查系统最大打开文件数<code>ulimit -a</code>是否修改成102400</h4><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20220225141029967.png" alt="image-20220225141029967"></p><p>完结撒花</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Centos</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Centos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github + Hexo 打造个人静态博客</title>
    <link href="/2024/01/12/%E6%89%93%E9%80%A0%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/01/12/%E6%89%93%E9%80%A0%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="Github-Hexo-打造个人静态博客"><a href="#Github-Hexo-打造个人静态博客" class="headerlink" title="Github + Hexo 打造个人静态博客"></a>Github + Hexo 打造个人静态博客</h1><span id="more"></span><h3 id="一、前提条件"><a href="#一、前提条件" class="headerlink" title="一、前提条件"></a>一、前提条件</h3><p>Node、Git，自行百度下载即可。</p><blockquote><p>Node 版本不低于10.13，推荐Node.js 12.0及以上版本。下载最新版安装即可。 </p></blockquote><h3 id="二、安装Hexo"><a href="#二、安装Hexo" class="headerlink" title="二、安装Hexo"></a>二、安装Hexo</h3><p>安装Hexo相当简单，安装Nodejs之后执行以下命令安装Hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-cli g  #推荐<br></code></pre></td></tr></table></figure><h4 id="1-初始化第一个博客"><a href="#1-初始化第一个博客" class="headerlink" title="1. 初始化第一个博客"></a>1. 初始化第一个博客</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init [文件夹名称]     #新建一个网站 hexo init blog<br>cd [文件夹名称]            #进入网站目录<br>npm run server           #启动服务器<br></code></pre></td></tr></table></figure><h4 id="2-访问"><a href="#2-访问" class="headerlink" title="2. 访问"></a>2. 访问</h4><p>通过以上步骤，最简单的hexo网站就好了，可以直接访问<code>http://localhost:4000/</code>，来看hexo自带的主题]</p><h3 id="三、配置Github"><a href="#三、配置Github" class="headerlink" title="三、配置Github"></a>三、配置Github</h3><h4 id="1-注册Github账户并登录，点击新建仓库。"><a href="#1-注册Github账户并登录，点击新建仓库。" class="headerlink" title="1. 注册Github账户并登录，点击新建仓库。"></a>1. 注册Github账户并登录，点击新建仓库。</h4><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20240112103011848.png" alt="image-20240112103011848"></p><p>仓库名称为【个人GitHub账户名】+ github.io，比如我的就是guodd012.github.io</p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20240112103129188.png" alt="image-20240112103129188"></p><p>这里需要注意的有三点：</p><ul><li>仓库名格式：username.github.io</li><li>仓库需要设置public，不能设置为private</li><li>勾选 Add a README file</li></ul><h4 id="2-配置仓库Pages"><a href="#2-配置仓库Pages" class="headerlink" title="2. 配置仓库Pages"></a>2. 配置仓库Pages</h4><p>这里的配置按照以下方式配置即可</p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20240112103604235.png" alt="image-20240112103604235"></p><h3 id="四、上传博客到GitHub仓库"><a href="#四、上传博客到GitHub仓库" class="headerlink" title="四、上传博客到GitHub仓库"></a>四、上传博客到GitHub仓库</h3><h4 id="1-安装-hexo-deployer-git"><a href="#1-安装-hexo-deployer-git" class="headerlink" title="1. 安装 hexo-deployer-git"></a>1. 安装 <code>hexo-deployer-git</code></h4><p>进入我们刚刚创建的本地项目目录下，执行命令安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save <br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20240112104451130.png" alt="image-20240112104451130"></p><h4 id="2-修改Hexo-配置文件"><a href="#2-修改Hexo-配置文件" class="headerlink" title="2. 修改Hexo 配置文件"></a>2. 修改Hexo 配置文件</h4><p>我们需要修改的是项目目录下的 <code>_config.yml</code> 这个文件</p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20240112104814499.png"></p><ul><li>修改url</li></ul><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20240112104839807.png" alt="image-20240112104839807"></p><ul><li><p>修改deploy</p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20240112104940144.png"></p></li></ul><p>修改完毕保存后，我们在cmd中执行命令<code>helo d</code>即可部署我们的项目，稍等几分钟，就能访问到了。</p><p>正常到这里就结束了，但后续多上传几次就会报错，这个原因可能是被GitHub限制了，我们需要设置token，并配置到deploy中。</p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20240112105230762.png" alt="image-20240112105230762"></p><h4 id="3-申请GitHub的token"><a href="#3-申请GitHub的token" class="headerlink" title="3. 申请GitHub的token"></a>3. 申请GitHub的token</h4><ul><li><p>打开Settings</p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20240112105342646.png" alt="image-20240112105342646"></p></li><li><p>选择左侧菜单最后一项 <code>Developer Settings</code></p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20240112105552673.png" alt="image-20240112105552673"></p></li><li><p>选择 token ，并创建新token。</p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20240112105700649.png" alt="image-20240112105700649"></p></li><li><p>创建token</p><p><img src="https://raw.githubusercontent.com/guodd012/typora-user-images/main/imgimage-20240112105807394.png" alt="image-20240112105807394"></p></li></ul><p>expiration是token过期时间，根据大家需求选择合适的即可。</p><p>按照图中勾选权限创建即可。</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/01/11/hello-world/"/>
    <url>/2024/01/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
